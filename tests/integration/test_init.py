# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import unittest
from pathlib import Path
from textwrap import dedent
from typing import AsyncIterator
from unittest.mock import ANY

import pytest
from fastramqpi.app import configure_logging

from os2mo_init.app import create_clients
from os2mo_init.app import main
from os2mo_init.autogenerated_graphql_client import GraphQLClient
from os2mo_init.config import Settings
from os2mo_init.root_org import get_root_org

case = unittest.TestCase()
case.maxDiff = None


@pytest.fixture
async def graphql_client() -> AsyncIterator[GraphQLClient]:
    settings = Settings()
    configure_logging("DEBUG")
    mo_client, graphql_client = create_clients(settings)
    async with mo_client, graphql_client:
        yield graphql_client


@pytest.mark.integration_test
async def test_os2mo_init(config_file: Path, graphql_client: GraphQLClient) -> None:
    # Precondition: OS2mo is empty.
    # The auto-use fixtures should automatically ensure test isolation, but
    # it only reverts OS2mo's database to before the test. Most developers use
    # OS2mo's compose with os2mo-init, so we must explicitly ensure that hasn't run.
    assert await get_root_org(graphql_client) is None

    # Setup config
    config_str = dedent(
        """
        root_organisation:
          municipality_code: 123
        facets:
          org_unit_address_type:
            PhoneUnit:
              title: "Telefon"
              scope: "PHONE"
              it_system: OS2mo
          visibility:
            Intern:
              title: "M책 vises internt"
              scope: "INTERNAL"
            Public:
              title: "M책 vises eksternt"
              scope: "PUBLIC"
        it_systems:
          OS2mo: "good"
          LDAP: "bad"
        """
    )
    config_file.write_text(config_str)

    # Init
    await main()

    # Verify root org
    root_org = await graphql_client.root_org_query()
    assert root_org.municipality_code == 123

    # Verify facets
    facets = await graphql_client.facets_query()
    case.assertCountEqual(
        facets.dict()["objects"],
        [
            {"current": {"uuid": ANY, "user_key": "address_property"}},
            {"current": {"uuid": ANY, "user_key": "association_type"}},
            {"current": {"uuid": ANY, "user_key": "employee_address_type"}},
            {"current": {"uuid": ANY, "user_key": "engagement_job_function"}},
            {"current": {"uuid": ANY, "user_key": "engagement_type"}},
            {"current": {"uuid": ANY, "user_key": "kle_aspect"}},
            {"current": {"uuid": ANY, "user_key": "kle_number"}},
            {"current": {"uuid": ANY, "user_key": "leave_type"}},
            {"current": {"uuid": ANY, "user_key": "manager_address_type"}},
            {"current": {"uuid": ANY, "user_key": "manager_level"}},
            {"current": {"uuid": ANY, "user_key": "manager_type"}},
            {"current": {"uuid": ANY, "user_key": "org_unit_address_type"}},
            {"current": {"uuid": ANY, "user_key": "org_unit_hierarchy"}},
            {"current": {"uuid": ANY, "user_key": "org_unit_level"}},
            {"current": {"uuid": ANY, "user_key": "org_unit_type"}},
            {"current": {"uuid": ANY, "user_key": "primary_type"}},
            {"current": {"uuid": ANY, "user_key": "responsibility"}},
            {"current": {"uuid": ANY, "user_key": "role"}},
            {"current": {"uuid": ANY, "user_key": "time_planning"}},
            {"current": {"uuid": ANY, "user_key": "visibility"}},
        ],
    )

    # Verify classes
    assert (
        await graphql_client.get_class("org_unit_address_type", "PhoneUnit")
    ).dict() == {
        "objects": [
            {
                "current": {
                    "uuid": ANY,
                    "facet": {"user_key": "org_unit_address_type"},
                    "user_key": "PhoneUnit",
                    "name": "Telefon",
                    "scope": "PHONE",
                    "it_system": {"uuid": ANY, "user_key": "OS2mo"},
                }
            }
        ]
    }
    assert (await graphql_client.get_class("visibility", "Public")).dict() == {
        "objects": [
            {
                "current": {
                    "uuid": ANY,
                    "facet": {"user_key": "visibility"},
                    "user_key": "Public",
                    "name": "M책 vises eksternt",
                    "scope": "PUBLIC",
                    "it_system": None,
                }
            }
        ]
    }
    assert (await graphql_client.get_class("visibility", "Intern")).dict() == {
        "objects": [
            {
                "current": {
                    "uuid": ANY,
                    "facet": {"user_key": "visibility"},
                    "user_key": "Intern",
                    "name": "M책 vises internt",
                    "scope": "INTERNAL",
                    "it_system": None,
                }
            }
        ]
    }

    # Verify it systems
    it_systems = await graphql_client.i_t_systems_query()
    case.assertCountEqual(
        it_systems.dict()["objects"],
        [
            {"current": {"uuid": ANY, "user_key": "LDAP", "name": "bad"}},
            {"current": {"uuid": ANY, "user_key": "OS2mo", "name": "good"}},
        ],
    )

    # Change config
    config_str = dedent(
        """
        facets:
          org_unit_address_type:
            PhoneUnit:
              title: "Telefono Cellulare"
              scope: "TEXT"
              it_system: LDAP
          visibility:
            Intern:
              title: "TOP SECRET"
              scope: "SECRET"
              it_system: OS2mo
        it_systems:
          LDAP: "worst"
        """
    )
    config_file.write_text(config_str)

    # Init again
    await main()

    # Verify classes
    assert (
        await graphql_client.get_class("org_unit_address_type", "PhoneUnit")
    ).dict() == {
        "objects": [
            {
                "current": {
                    "uuid": ANY,
                    "facet": {"user_key": "org_unit_address_type"},
                    "user_key": "PhoneUnit",
                    "name": "Telefono Cellulare",
                    "scope": "TEXT",
                    "it_system": {"uuid": ANY, "user_key": "LDAP"},
                }
            }
        ]
    }
    assert (await graphql_client.get_class("visibility", "Intern")).dict() == {
        "objects": [
            {
                "current": {
                    "uuid": ANY,
                    "facet": {"user_key": "visibility"},
                    "user_key": "Intern",
                    "name": "TOP SECRET",
                    "scope": "SECRET",
                    "it_system": {"uuid": ANY, "user_key": "OS2mo"},
                }
            }
        ]
    }

    # Verify it systems
    it_systems = await graphql_client.i_t_systems_query()
    assert {
        "current": {"uuid": ANY, "user_key": "LDAP", "name": "worst"}
    } in it_systems.dict()["objects"]


@pytest.mark.integration_test
def test_nothing() -> None:
    """Our CI templates requires at least two integrationtests."""
