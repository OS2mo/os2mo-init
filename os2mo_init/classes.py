# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from uuid import UUID

import structlog

from os2mo_init.autogenerated_graphql_client import GraphQLClient
from os2mo_init.config import ConfigFacet

logger = structlog.stdlib.get_logger()


async def ensure_classes(
    client: GraphQLClient,
    config_classes: dict[str, ConfigFacet],
) -> None:
    """Ensure that the given classes exists.

    Args:
        client: MO GraphQL client.
        config_classes: Desired facets and their classes.
    """
    logger.info("Ensuring classes", classes=config_classes)

    existing_classes = [
        o.current
        for o in (await client.classes_query()).objects
        if o.current is not None
    ]
    logger.debug("Existing classes", existing=existing_classes)

    facet_uuids = {f.user_key: f.uuid for f in existing_classes}
    existing_classes_by_user_key = {
        facet.user_key: {class_.user_key: class_ for class_ in facet.classes}
        for facet in existing_classes
    }
    existing_it_systems_by_user_key = {
        o.current.user_key: o.current
        for o in (await client.i_t_systems_query()).objects
        if o.current is not None
    }

    for facet_user_key, classes in config_classes.items():
        for class_user_key, class_data in classes.items():
            it_system_uuid: UUID | None = None
            if class_data.it_system is not None:
                try:
                    it_system = existing_it_systems_by_user_key[class_data.it_system]
                except KeyError as e:
                    raise ValueError(
                        # noqa: E501
                        f"Class '{class_user_key}' cannot be associated with non-existent it-system '{class_data.it_system}'"
                    ) from e
                it_system_uuid = it_system.uuid
            try:
                existing = existing_classes_by_user_key[facet_user_key][class_user_key]
            except KeyError:
                logger.info("Creating class", data=class_data)
                await client.create_class_mutation(
                    facet_uuid=facet_uuids[facet_user_key],
                    user_key=class_user_key,
                    name=class_data.title,
                    scope=class_data.scope,
                    it_system_uuid=it_system_uuid,
                )
                continue

            existing_it_system_uuid = (
                existing.it_system.uuid if existing.it_system is not None else None
            )
            if (
                existing.name != class_data.title
                or existing.scope != class_data.scope
                or existing_it_system_uuid != class_data.it_system
            ):
                logger.info("Updating class", data=class_data)
                await client.update_class_mutation(
                    facet_uuid=facet_uuids[facet_user_key],
                    uuid=existing.uuid,
                    user_key=class_user_key,
                    name=class_data.title,
                    scope=class_data.scope,
                    it_system_uuid=it_system_uuid,
                )
