# Generated by ariadne-codegen on 2024-08-13 19:15
# Source: queries.graphql

from typing import Optional
from typing import Union
from uuid import UUID

from .async_base_client import AsyncBaseClient
from .base_model import UNSET
from .base_model import UnsetType
from .create_class_mutation import CreateClassMutation
from .create_class_mutation import CreateClassMutationClassCreate
from .create_facet_mutation import CreateFacetMutation
from .create_facet_mutation import CreateFacetMutationFacetCreate
from .create_i_t_system_mutation import CreateITSystemMutation
from .create_i_t_system_mutation import CreateITSystemMutationItsystemCreate
from .facets_query import FacetsQuery
from .facets_query import FacetsQueryFacets
from .get_class import GetClass
from .get_class import GetClassClasses
from .i_t_systems_query import ITSystemsQuery
from .i_t_systems_query import ITSystemsQueryItsystems
from .root_org_create import RootOrgCreate
from .root_org_create import RootOrgCreateOrgCreate
from .root_org_query import RootOrgQuery
from .root_org_query import RootOrgQueryOrg
from .update_class_mutation import UpdateClassMutation
from .update_class_mutation import UpdateClassMutationClassUpdate
from .update_i_t_system_mutation import UpdateITSystemMutation
from .update_i_t_system_mutation import UpdateITSystemMutationItsystemUpdate


def gql(q: str) -> str:
    return q


class GraphQLClient(AsyncBaseClient):
    async def facets_query(self) -> FacetsQueryFacets:
        query = gql(
            """
            query FacetsQuery {
              facets {
                objects {
                  current {
                    uuid
                    user_key
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return FacetsQuery.parse_obj(data).facets

    async def create_facet_mutation(
        self, user_key: str
    ) -> CreateFacetMutationFacetCreate:
        query = gql(
            """
            mutation CreateFacetMutation($user_key: String!) {
              facet_create(input: {user_key: $user_key, validity: {from: null}}) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {"user_key": user_key}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateFacetMutation.parse_obj(data).facet_create

    async def create_class_mutation(
        self,
        facet_uuid: UUID,
        user_key: str,
        name: str,
        scope: Union[Optional[str], UnsetType] = UNSET,
        it_system_uuid: Union[Optional[UUID], UnsetType] = UNSET,
    ) -> CreateClassMutationClassCreate:
        query = gql(
            """
            mutation CreateClassMutation($facet_uuid: UUID!, $user_key: String!, $name: String!, $scope: String, $it_system_uuid: UUID) {
              class_create(
                input: {facet_uuid: $facet_uuid, user_key: $user_key, name: $name, scope: $scope, it_system_uuid: $it_system_uuid, validity: {from: null}}
              ) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {
            "facet_uuid": facet_uuid,
            "user_key": user_key,
            "name": name,
            "scope": scope,
            "it_system_uuid": it_system_uuid,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateClassMutation.parse_obj(data).class_create

    async def update_class_mutation(
        self,
        facet_uuid: UUID,
        uuid: UUID,
        user_key: str,
        name: str,
        scope: Union[Optional[str], UnsetType] = UNSET,
        it_system_uuid: Union[Optional[UUID], UnsetType] = UNSET,
    ) -> UpdateClassMutationClassUpdate:
        query = gql(
            """
            mutation UpdateClassMutation($facet_uuid: UUID!, $uuid: UUID!, $user_key: String!, $name: String!, $scope: String, $it_system_uuid: UUID) {
              class_update(
                input: {uuid: $uuid, facet_uuid: $facet_uuid, user_key: $user_key, name: $name, scope: $scope, it_system_uuid: $it_system_uuid, validity: {from: null}}
              ) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {
            "facet_uuid": facet_uuid,
            "uuid": uuid,
            "user_key": user_key,
            "name": name,
            "scope": scope,
            "it_system_uuid": it_system_uuid,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return UpdateClassMutation.parse_obj(data).class_update

    async def i_t_systems_query(self) -> ITSystemsQueryItsystems:
        query = gql(
            """
            query ITSystemsQuery {
              itsystems {
                objects {
                  current {
                    uuid
                    user_key
                    name
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return ITSystemsQuery.parse_obj(data).itsystems

    async def create_i_t_system_mutation(
        self, user_key: str, name: str
    ) -> CreateITSystemMutationItsystemCreate:
        query = gql(
            """
            mutation CreateITSystemMutation($user_key: String!, $name: String!) {
              itsystem_create(
                input: {user_key: $user_key, name: $name, validity: {from: null}}
              ) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {"user_key": user_key, "name": name}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateITSystemMutation.parse_obj(data).itsystem_create

    async def update_i_t_system_mutation(
        self, uuid: UUID, user_key: str, name: str
    ) -> UpdateITSystemMutationItsystemUpdate:
        query = gql(
            """
            mutation UpdateITSystemMutation($uuid: UUID!, $user_key: String!, $name: String!) {
              itsystem_update(
                input: {uuid: $uuid, user_key: $user_key, name: $name, validity: {from: null}}
              ) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {
            "uuid": uuid,
            "user_key": user_key,
            "name": name,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return UpdateITSystemMutation.parse_obj(data).itsystem_update

    async def root_org_query(self) -> RootOrgQueryOrg:
        query = gql(
            """
            query RootOrgQuery {
              org {
                uuid
                municipality_code
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return RootOrgQuery.parse_obj(data).org

    async def root_org_create(
        self, municipality_code: Union[Optional[int], UnsetType] = UNSET
    ) -> RootOrgCreateOrgCreate:
        query = gql(
            """
            mutation RootOrgCreate($municipality_code: Int) {
              org_create(input: {municipality_code: $municipality_code}) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {"municipality_code": municipality_code}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return RootOrgCreate.parse_obj(data).org_create

    async def get_class(
        self, facet_user_key: str, class_user_key: str
    ) -> GetClassClasses:
        query = gql(
            """
            query get_class($facet_user_key: String!, $class_user_key: String!) {
              classes(
                filter: {user_keys: [$class_user_key], from_date: null, to_date: null, facet: {user_keys: [$facet_user_key]}}
              ) {
                objects {
                  current {
                    facet {
                      user_key
                    }
                    uuid
                    user_key
                    name
                    scope
                    it_system {
                      uuid
                      user_key
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "facet_user_key": facet_user_key,
            "class_user_key": class_user_key,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetClass.parse_obj(data).classes
