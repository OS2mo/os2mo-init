# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import structlog

from os2mo_init.autogenerated_graphql_client import GraphQLClient

logger = structlog.stdlib.get_logger()


async def ensure_it_systems(
    client: GraphQLClient,
    config_it_systems: dict[str, str],
) -> None:
    """Ensure that the given IT Systems exists.

    Args:
        client: MO GraphQL client.
        config_it_systems: Dictionary mapping from desired IT System user key to name.
    """
    logger.info("Ensuring IT Systems", it_systems=config_it_systems)

    existing_it_systems = {
        o.current.user_key: o.current
        for o in (await client.i_t_systems_query()).objects
        if o.current is not None
    }
    logger.debug("Existing IT Systems", existing=existing_it_systems)

    for user_key, name in config_it_systems.items():
        try:
            existing = existing_it_systems[user_key]
        except KeyError:
            logger.info("Creating IT System", user_key=user_key)
            await client.create_i_t_system_mutation(
                user_key=user_key,
                name=name,
            )
            continue
        if existing.name != name:
            logger.info("Updating IT System", user_key=user_key)
            await client.update_i_t_system_mutation(
                uuid=existing.uuid,
                user_key=user_key,
                name=name,
            )
