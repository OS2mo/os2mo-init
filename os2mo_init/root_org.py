# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

import structlog
from more_itertools import one

from os2mo_init.autogenerated_graphql_client import GraphQLClient
from os2mo_init.autogenerated_graphql_client import GraphQLClientGraphQLMultiError
from os2mo_init.autogenerated_graphql_client import RootOrgQueryOrg
from os2mo_init.config import ConfigRootOrganisation

logger = structlog.stdlib.get_logger()


async def get_root_org(client: GraphQLClient) -> RootOrgQueryOrg | None:
    logger.debug("Getting root org from MO")
    try:
        result = await client.root_org_query()
    except GraphQLClientGraphQLMultiError as e:
        logger.debug("Error getting root org from MO", exc=e)
        if one(e.errors).message == "ErrorCodes.E_ORG_UNCONFIGURED":
            return None
        raise
    return result


async def ensure_root_organisation(
    client: GraphQLClient,
    config_root_organisation: ConfigRootOrganisation,
) -> None:
    """
    Ensure that the root organisation exists with the given configuration.

    Args:
        client: MO GraphQL client.
        config_root_organisation: Desired root organisation.
    """
    logger.info("Ensuring root org", root_org=config_root_organisation)
    root_org = await get_root_org(client)
    logger.debug("Existing root org", existing=root_org)
    if root_org is not None:
        if root_org.municipality_code != config_root_organisation.municipality_code:
            raise NotImplementedError(
                "Changing municipality code is not implemented in OS2mo."
            )
        logger.info("Root org already configured")
        return

    logger.info("Creating org org")
    await client.root_org_create(
        municipality_code=config_root_organisation.municipality_code,
    )
